{
    "sourceFile": "App/__init__.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745145278860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745145278860,
            "name": "Commit-0",
            "content": "import os\r\nfrom flask import Flask\r\nfrom .config import config_by_name # Relative import for config within the package\r\n\r\n# Create the Flask application instance\r\n# Explicitly set template_folder based on your structure\r\n# Explicitly set static_folder based on convention and config.py usage\r\napp = Flask(__name__,\r\n            template_folder='Templates/HTML',\r\n            static_folder='static')\r\n\r\n# Load configuration from config.py\r\n# Use environment variable FLASK_CONFIG or default to 'development'\r\nconfig_name = os.getenv('FLASK_CONFIG', 'development')\r\napp.config.from_object(config_by_name[config_name])\r\n\r\n# Ensure the upload folder exists after the config is loaded\r\n# This is better placed here than in config.py as it uses app.config\r\nupload_folder = app.config.get('UPLOAD_FOLDER')\r\nif upload_folder:\r\n    try:\r\n        os.makedirs(upload_folder, exist_ok=True) # exist_ok=True prevents error if folder exists\r\n        # Optional: Log folder creation if needed, requires app context or standard logging setup\r\n        # app.logger.info(f\"Ensured upload folder exists: {upload_folder}\")\r\n    except OSError as e:\r\n        # Log the error if folder creation fails\r\n        app.logger.error(f\"Could not create upload folder {upload_folder}: {e}\")\r\nelse:\r\n    app.logger.warning(\"UPLOAD_FOLDER is not configured.\")\r\n\r\n\r\n# Import routes after the app object is created to avoid circular imports\r\nfrom App import routes\r\n\r\n# Optional: Add logging configuration here if needed\r\n# Example:\r\n# if not app.debug:\r\n#     import logging\r\n#     from logging.handlers import RotatingFileHandler\r\n#     if not os.path.exists('logs'):\r\n#         os.mkdir('logs')\r\n#     file_handler = RotatingFileHandler('logs/rdc_concrete.log', maxBytes=10240, backupCount=10)\r\n#     file_handler.setFormatter(logging.Formatter(\r\n#         '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))\r\n#     file_handler.setLevel(logging.INFO)\r\n#     app.logger.addHandler(file_handler)\r\n#     app.logger.setLevel(logging.INFO)\r\n#     app.logger.info('RDC Concrete startup')"
        }
    ]
}