{
    "sourceFile": "App/__init__.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1745145278860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1745146810096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,81 @@\n import os\r\n+import logging\r\n+from logging.handlers import RotatingFileHandler\r\n from flask import Flask\r\n-from .config import config_by_name # Relative import for config within the package\r\n+from .config import config_by_name # Relative import for config\r\n \r\n+# Determine the absolute path to the App directory\r\n+basedir = os.path.abspath(os.path.dirname(__file__))\r\n+project_root = os.path.dirname(basedir) # Project root directory\r\n+\r\n # Create the Flask application instance\r\n-# Explicitly set template_folder based on your structure\r\n-# Explicitly set static_folder based on convention and config.py usage\r\n+# Explicitly set template_folder and static_folder relative to this file's directory (App)\r\n app = Flask(__name__,\r\n-            template_folder='Templates/HTML',\r\n-            static_folder='static')\r\n+            template_folder=os.path.join(basedir, 'Templates', 'HTML'),\r\n+            static_folder=os.path.join(basedir, 'static'))\r\n \r\n-# Load configuration from config.py\r\n-# Use environment variable FLASK_CONFIG or default to 'development'\r\n+# Load configuration based on FLASK_CONFIG environment variable\r\n config_name = os.getenv('FLASK_CONFIG', 'development')\r\n-app.config.from_object(config_by_name[config_name])\r\n+try:\r\n+    app.config.from_object(config_by_name[config_name])\r\n+    print(f\" * Loading configuration: '{config_name}'\")\r\n+except KeyError:\r\n+    print(f\" ! Warning: Invalid FLASK_CONFIG value '{config_name}'. Using 'development'.\")\r\n+    config_name = 'development'\r\n+    app.config.from_object(config_by_name[config_name])\r\n \r\n-# Ensure the upload folder exists after the config is loaded\r\n-# This is better placed here than in config.py as it uses app.config\r\n-upload_folder = app.config.get('UPLOAD_FOLDER')\r\n-if upload_folder:\r\n+# --- Logging Setup ---\r\n+if not app.debug and not app.testing:\r\n+    log_dir = os.path.join(project_root, 'logs')\r\n+    if not os.path.exists(log_dir):\r\n+        try:\r\n+            os.makedirs(log_dir)\r\n+        except OSError:\r\n+            print(\" ! Error: Could not create logs directory.\")\r\n+\r\n+    log_file = os.path.join(log_dir, 'rdc_concrete.log')\r\n\\ No newline at end of file\n+    file_handler = RotatingFileHandler(log_file, maxBytes=10240, backupCount=10)\r\n+    file_handler.setFormatter(logging.Formatter(\r\n+        '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))\r\n+    file_handler.setLevel(logging.INFO)\r\n+    app.logger.addHandler(file_handler)\r\n+    app.logger.setLevel(logging.INFO)\r\n+    app.logger.info('RDC Concrete Application startup')\r\n+else:\r\n+    # Use basic logging in debug mode (Werkzeug often adds handlers too)\r\n+    logging.basicConfig(level=logging.DEBUG)\r\n+    app.logger.info('RDC Concrete Application startup (Debug Mode)')\r\n+\r\n+\r\n+# --- Ensure Essential Folders Exist ---\r\n+# UPLOAD_FOLDER from config might be relative to project root\r\n+upload_folder_config = app.config.get('UPLOAD_FOLDER')\r\n+if upload_folder_config:\r\n+    # Construct absolute path if relative\r\n+    if not os.path.isabs(upload_folder_config):\r\n+        upload_folder_abs = os.path.join(project_root, upload_folder_config)\r\n+    else:\r\n+        upload_folder_abs = upload_folder_config\r\n+\r\n     try:\r\n-        os.makedirs(upload_folder, exist_ok=True) # exist_ok=True prevents error if folder exists\r\n-        # Optional: Log folder creation if needed, requires app context or standard logging setup\r\n-        # app.logger.info(f\"Ensured upload folder exists: {upload_folder}\")\r\n+        os.makedirs(upload_folder_abs, exist_ok=True)\r\n+        app.logger.info(f\"Ensured upload folder exists: {upload_folder_abs}\")\r\n+        # Update config with absolute path for consistency if needed elsewhere\r\n+        app.config['UPLOAD_FOLDER_ABS'] = upload_folder_abs\r\n     except OSError as e:\r\n-        # Log the error if folder creation fails\r\n-        app.logger.error(f\"Could not create upload folder {upload_folder}: {e}\")\r\n+        app.logger.error(f\"Could not create upload folder {upload_folder_abs}: {e}\")\r\n else:\r\n-    app.logger.warning(\"UPLOAD_FOLDER is not configured.\")\r\n+    app.logger.warning(\"UPLOAD_FOLDER is not configured in config.py.\")\r\n \r\n+# Results folder (relative to static folder)\r\n+results_folder = os.path.join(app.static_folder, 'results')\r\n+try:\r\n+    os.makedirs(results_folder, exist_ok=True)\r\n+    app.logger.info(f\"Ensured results folder exists: {results_folder}\")\r\n+except OSError as e:\r\n+    app.logger.error(f\"Could not create results folder {results_folder}: {e}\")\r\n \r\n-# Import routes after the app object is created to avoid circular imports\r\n+\r\n+# Import routes AFTER app and config are defined to avoid circular imports\r\n from App import routes\r\n-\r\n-# Optional: Add logging configuration here if needed\r\n-# Example:\r\n-# if not app.debug:\r\n-#     import logging\r\n-#     from logging.handlers import RotatingFileHandler\r\n-#     if not os.path.exists('logs'):\r\n-#         os.mkdir('logs')\r\n-#     file_handler = RotatingFileHandler('logs/rdc_concrete.log', maxBytes=10240, backupCount=10)\r\n-#     file_handler.setFormatter(logging.Formatter(\r\n-#         '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))\r\n-#     file_handler.setLevel(logging.INFO)\r\n-#     app.logger.addHandler(file_handler)\r\n-#     app.logger.setLevel(logging.INFO)\r\n-#     app.logger.info('RDC Concrete startup')\n+app.logger.info(\"Application routes imported.\")\n\\ No newline at end of file\n"
                }
            ],
            "date": 1745145278860,
            "name": "Commit-0",
            "content": "import os\r\nfrom flask import Flask\r\nfrom .config import config_by_name # Relative import for config within the package\r\n\r\n# Create the Flask application instance\r\n# Explicitly set template_folder based on your structure\r\n# Explicitly set static_folder based on convention and config.py usage\r\napp = Flask(__name__,\r\n            template_folder='Templates/HTML',\r\n            static_folder='static')\r\n\r\n# Load configuration from config.py\r\n# Use environment variable FLASK_CONFIG or default to 'development'\r\nconfig_name = os.getenv('FLASK_CONFIG', 'development')\r\napp.config.from_object(config_by_name[config_name])\r\n\r\n# Ensure the upload folder exists after the config is loaded\r\n# This is better placed here than in config.py as it uses app.config\r\nupload_folder = app.config.get('UPLOAD_FOLDER')\r\nif upload_folder:\r\n    try:\r\n        os.makedirs(upload_folder, exist_ok=True) # exist_ok=True prevents error if folder exists\r\n        # Optional: Log folder creation if needed, requires app context or standard logging setup\r\n        # app.logger.info(f\"Ensured upload folder exists: {upload_folder}\")\r\n    except OSError as e:\r\n        # Log the error if folder creation fails\r\n        app.logger.error(f\"Could not create upload folder {upload_folder}: {e}\")\r\nelse:\r\n    app.logger.warning(\"UPLOAD_FOLDER is not configured.\")\r\n\r\n\r\n# Import routes after the app object is created to avoid circular imports\r\nfrom App import routes\r\n\r\n# Optional: Add logging configuration here if needed\r\n# Example:\r\n# if not app.debug:\r\n#     import logging\r\n#     from logging.handlers import RotatingFileHandler\r\n#     if not os.path.exists('logs'):\r\n#         os.mkdir('logs')\r\n#     file_handler = RotatingFileHandler('logs/rdc_concrete.log', maxBytes=10240, backupCount=10)\r\n#     file_handler.setFormatter(logging.Formatter(\r\n#         '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'))\r\n#     file_handler.setLevel(logging.INFO)\r\n#     app.logger.addHandler(file_handler)\r\n#     app.logger.setLevel(logging.INFO)\r\n#     app.logger.info('RDC Concrete startup')"
        }
    ]
}