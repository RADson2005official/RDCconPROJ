{
    "sourceFile": "App/static/JS/main.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745150680015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745150680015,
            "name": "Commit-0",
            "content": "document.addEventListener('DOMContentLoaded', () => {\r\n    // --- Get DOM Elements ---\r\n    const topImageFileInput = document.getElementById('topImageFile');\r\n    const frontImageFileInput = document.getElementById('frontImageFile');\r\n    const topImagePreview = document.getElementById('topImage');\r\n    const frontImagePreview = document.getElementById('frontImage');\r\n    // Ensure placeholders are correctly selected (assuming they are the next sibling div)\r\n    const topPlaceholder = topImagePreview?.nextElementSibling;\r\n    const frontPlaceholder = frontImagePreview?.nextElementSibling;\r\n    const processUploadedBtn = document.getElementById('processUploadedBtn');\r\n    const clearBtn = document.getElementById('clearBtn');\r\n    const loadStatus = document.getElementById('loadStatus');\r\n    const resultsBody = document.getElementById('results-body');\r\n    const consoleDiv = document.getElementById('console');\r\n    const statusDiv = document.getElementById('status');\r\n    const visualizationDiv = document.getElementById('visualization');\r\n\r\n    // --- Function to update status bar ---\r\n    function updateStatus(message, isError = false) {\r\n        if (!statusDiv) return; // Guard against missing element\r\n        const statusDot = statusDiv.querySelector('.status-dot');\r\n        const statusTextNode = statusDiv.childNodes[1]; // Assuming text is the second node\r\n\r\n        if (statusTextNode) {\r\n             statusTextNode.nodeValue = ` ${message}`; // Update text node\r\n        } else {\r\n             // Fallback if structure is different\r\n             statusDiv.textContent = message;\r\n        }\r\n\r\n        if (statusDot) {\r\n            if (isError) {\r\n                statusDot.classList.remove('active');\r\n                statusDot.classList.add('error');\r\n            } else {\r\n                statusDot.classList.remove('error');\r\n                statusDot.classList.add('active');\r\n            }\r\n        }\r\n        addConsoleEntry(message, isError ? 'error' : 'info');\r\n    }\r\n\r\n    // --- Function to add console entry ---\r\n    function addConsoleEntry(message, type = 'info') {\r\n        if (!consoleDiv) return; // Guard against missing element\r\n        const entry = document.createElement('div');\r\n        entry.classList.add('console-entry', `console-${type}`);\r\n        // Sanitize message slightly before adding\r\n        entry.textContent = `[${new Date().toLocaleTimeString()}] ${message.toString()}`;\r\n        consoleDiv.insertBefore(entry, consoleDiv.firstChild);\r\n        if (consoleDiv.children.length > 50) {\r\n            consoleDiv.removeChild(consoleDiv.lastChild);\r\n        }\r\n    }\r\n\r\n    // --- Function to check if both files are selected ---\r\n    function checkFilesSelected() {\r\n        const topFile = topImageFileInput?.files?.length > 0;\r\n        const frontFile = frontImageFileInput?.files?.length > 0;\r\n        if(processUploadedBtn) processUploadedBtn.disabled = !(topFile && frontFile);\r\n\r\n        if (loadStatus) {\r\n            if (topFile && frontFile) {\r\n                 loadStatus.textContent = \"Ready to process.\";\r\n                 loadStatus.classList.remove('text-danger');\r\n                 loadStatus.classList.add('text-success');\r\n            } else if (topFile) {\r\n                 loadStatus.textContent = \"Front view image missing.\";\r\n                 loadStatus.classList.add('text-danger');\r\n                 loadStatus.classList.remove('text-success');\r\n            } else if (frontFile) {\r\n                 loadStatus.textContent = \"Top view image missing.\";\r\n                 loadStatus.classList.add('text-danger');\r\n                 loadStatus.classList.remove('text-success');\r\n            } else {\r\n                 loadStatus.textContent = \"Select top and front view images.\";\r\n                 loadStatus.classList.remove('text-danger', 'text-success');\r\n            }\r\n        }\r\n    }\r\n\r\n    // --- Function to preview selected image ---\r\n    function previewImage(fileInput, imgElement, placeholderElement) {\r\n        // Ensure elements exist before proceeding\r\n        if (!fileInput || !imgElement) {\r\n             console.warn(\"Preview function called with missing elements.\");\r\n             return;\r\n        }\r\n\r\n        if (fileInput.files && fileInput.files[0]) {\r\n            const file = fileInput.files[0];\r\n            // Basic check for image type (optional but good practice)\r\n            if (!file.type.startsWith('image/')){\r\n                updateStatus(`Selected file is not an image: ${file.name}`, true);\r\n                // Reset input if needed: fileInput.value = '';\r\n                return;\r\n            }\r\n\r\n            const reader = new FileReader();\r\n\r\n            reader.onload = function (e) {\r\n                imgElement.src = e.target.result;\r\n                imgElement.alt = `Preview: ${file.name}`;\r\n                imgElement.style.display = 'block'; // Show the image\r\n                if(placeholderElement) placeholderElement.style.display = 'none'; // Hide the placeholder\r\n            }\r\n\r\n            reader.onerror = function(e) {\r\n                console.error(\"FileReader error:\", e);\r\n                updateStatus(`Error reading file: ${file.name}`, true);\r\n                imgElement.src = \"\"; // Clear preview on error\r\n                imgElement.style.display = 'none'; // Hide image element\r\n                if(placeholderElement) placeholderElement.style.display = 'block'; // Show placeholder\r\n            }\r\n\r\n            reader.readAsDataURL(file); // Read the file as Data URL\r\n        } else {\r\n            // No file selected or selection cleared\r\n            imgElement.src = \"\";\r\n            imgElement.alt = imgElement.id === 'topImage' ? \"Top View Image Preview\" : \"Front View Image Preview\";\r\n            imgElement.style.display = 'none'; // Hide the image\r\n            if(placeholderElement) placeholderElement.style.display = 'block'; // Show the placeholder\r\n        }\r\n    }\r\n\r\n    // --- Event Listeners for File Inputs ---\r\n    if (topImageFileInput) {\r\n        topImageFileInput.addEventListener('change', () => {\r\n            previewImage(topImageFileInput, topImagePreview, topPlaceholder);\r\n            checkFilesSelected();\r\n        });\r\n    } else {\r\n         console.error(\"Element with ID 'topImageFile' not found.\");\r\n    }\r\n\r\n\r\n    if (frontImageFileInput) {\r\n        frontImageFileInput.addEventListener('change', () => {\r\n            previewImage(frontImageFileInput, frontImagePreview, frontPlaceholder);\r\n            checkFilesSelected();\r\n        });\r\n     } else {\r\n         console.error(\"Element with ID 'frontImageFile' not found.\");\r\n    }\r\n\r\n\r\n    // --- Event Listener for the Process Uploaded Button ---\r\n    if (processUploadedBtn) {\r\n        processUploadedBtn.addEventListener('click', async () => {\r\n            // ... (rest of the fetch logic from previous response remains the same) ...\r\n             if (!topImageFileInput.files[0] || !frontImageFileInput.files[0]) {\r\n                updateStatus(\"Please select both top and front view images.\", true);\r\n                return;\r\n            }\r\n\r\n            updateStatus(\"Processing uploaded images...\");\r\n            addConsoleEntry(\"Starting image processing...\");\r\n            processUploadedBtn.disabled = true;\r\n            if(clearBtn) clearBtn.disabled = true; // Disable clear button during processing\r\n\r\n            // Clear previous results and visualization\r\n            if(resultsBody) resultsBody.innerHTML = '<tr><td colspan=\"3\" class=\"text-center p-3\"><div class=\"spinner-border spinner-border-sm\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div> Processing...</td></tr>';\r\n            if(visualizationDiv) visualizationDiv.innerHTML = '<div class=\"spinner-border text-primary\" role=\"status\"><span class=\"visually-hidden\">Loading...</span></div>';\r\n\r\n\r\n            // Create FormData to send files\r\n            const formData = new FormData();\r\n            formData.append('topImageFile', topImageFileInput.files[0]);\r\n            formData.append('frontImageFile', frontImageFileInput.files[0]);\r\n\r\n            try {\r\n                const response = await fetch('/process_uploaded_images', { // Ensure this matches your Flask route\r\n                    method: 'POST',\r\n                    body: formData\r\n                });\r\n\r\n                const data = await response.json();\r\n\r\n                if (response.ok && data.status === 'success') {\r\n                    updateStatus(\"Processing successful.\");\r\n                    addConsoleEntry(`Volume calculated: ${data.volume} ${data.unit}`);\r\n                    addConsoleEntry(`Processing time: ${data.processing_time}s`);\r\n\r\n                    // Display results in table\r\n                    if (resultsBody) {\r\n                        const newRow = `\r\n                            <tr>\r\n                                <td>${resultsBody.rows.length + 1}</td>\r\n                                <td>${data.volume} ${data.unit}</td>\r\n                                <td>${data.timestamp}</td>\r\n                            </tr>\r\n                        `;\r\n                        // Clear placeholder/spinner before adding row\r\n                        if (resultsBody.rows.length === 1 && resultsBody.rows[0].cells.length === 1 && resultsBody.rows[0].cells[0].querySelector('.spinner-border')) {\r\n                             resultsBody.innerHTML = '';\r\n                        }\r\n                        resultsBody.insertAdjacentHTML('beforeend', newRow);\r\n                    }\r\n\r\n\r\n                    // Display visualization if URL provided\r\n                    if (visualizationDiv) {\r\n                        if (data.visualization_url) {\r\n                            visualizationDiv.innerHTML = `<img src=\"${data.visualization_url}\" alt=\"Processing Visualization\" class=\"img-fluid rounded\">`;\r\n                            addConsoleEntry(\"Visualization generated.\");\r\n                        } else {\r\n                            visualizationDiv.innerHTML = '<p class=\"text-muted\">No visualization available.</p>';\r\n                            addConsoleEntry(\"Visualization not generated or available.\", 'warning');\r\n                        }\r\n                    }\r\n\r\n                } else {\r\n                    const errorMsg = data.error || `Server responded with status ${response.status}`;\r\n                    updateStatus(`Processing failed: ${errorMsg}`, true);\r\n                    if(resultsBody) resultsBody.innerHTML = `<tr><td colspan=\"3\" class=\"text-center text-danger p-3\">Processing failed: ${errorMsg}</td></tr>`;\r\n                    if(visualizationDiv) visualizationDiv.innerHTML = '<p class=\"text-danger\">Processing failed.</p>';\r\n                }\r\n\r\n            } catch (error) {\r\n                console.error('Fetch error:', error);\r\n                updateStatus(`Network or client-side error: ${error.message}`, true);\r\n                if(resultsBody) resultsBody.innerHTML = `<tr><td colspan=\"3\" class=\"text-center text-danger p-3\">Error: ${error.message}</td></tr>`;\r\n                if(visualizationDiv) visualizationDiv.innerHTML = '<p class=\"text-danger\">An error occurred.</p>';\r\n            } finally {\r\n                // Re-enable buttons after processing attempt\r\n                checkFilesSelected(); // Re-evaluates process button state based on file inputs\r\n                if(clearBtn) clearBtn.disabled = false;\r\n            }\r\n        });\r\n    } else {\r\n         console.error(\"Element with ID 'processUploadedBtn' not found.\");\r\n    }\r\n\r\n\r\n    // --- Event Listener for Clear Button ---\r\n     if (clearBtn) {\r\n        clearBtn.addEventListener('click', () => {\r\n            // Reset file inputs\r\n            if(topImageFileInput) topImageFileInput.value = '';\r\n            if(frontImageFileInput) frontImageFileInput.value = '';\r\n\r\n            // Reset previews\r\n            previewImage(topImageFileInput, topImagePreview, topPlaceholder);\r\n            previewImage(frontImageFileInput, frontImagePreview, frontPlaceholder);\r\n\r\n            // Reset results table (add placeholder)\r\n            if(resultsBody) resultsBody.innerHTML = '<tr><td colspan=\"3\" class=\"text-center text-muted p-3\">No results yet.</td></tr>';\r\n\r\n            // Reset visualization area\r\n            if(visualizationDiv) visualizationDiv.innerHTML = '<p class=\"text-muted\">Visualization Area</p>';\r\n\r\n            // Reset console (optional, or add clear message)\r\n            addConsoleEntry(\"Inputs and results cleared.\", 'info');\r\n\r\n            // Reset status and buttons\r\n            checkFilesSelected();\r\n            updateStatus(\"Application ready.\");\r\n        });\r\n    } else {\r\n         console.error(\"Element with ID 'clearBtn' not found.\");\r\n    }\r\n\r\n\r\n    // Initial setup\r\n    updateStatus(\"Application initialized.\");\r\n    addConsoleEntry(\"System ready. Select images to begin.\");\r\n    checkFilesSelected(); // Set initial button state\r\n\r\n}); // End DOMContentLoaded\r\n"
        }
    ]
}