{
    "sourceFile": "App/routes.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745145120355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745145120355,
            "name": "Commit-0",
            "content": "from flask import render_template, request, jsonify, redirect, url_for, flash, current_app\r\nimport os\r\nfrom werkzeug.utils import secure_filename\r\nfrom App import app\r\nfrom App.Utils.ImageLoader import ImageLoader\r\nfrom App.Utils.ImageProcessor import ImageProcessor\r\nfrom App.Utils.segmentation import perform_segmentation\r\nfrom App.Utils.Calculation import calculate_damage\r\nfrom App.Utils.Visualizer import visualize_results\r\n\r\n# Helper function to check if a file has an allowed extension\r\ndef allowed_file(filename):\r\n    return '.' in filename and \\\r\n           filename.rsplit('.', 1)[1].lower() in current_app.config['ALLOWED_EXTENSIONS']\r\n\r\n@app.route('/')\r\ndef index():\r\n    \"\"\"Render the main page.\"\"\"\r\n    return render_template('main.html')\r\n\r\n@app.route('/upload', methods=['POST'])\r\ndef upload_file():\r\n    \"\"\"Handle file upload.\"\"\"\r\n    # Check if the post request has the file part\r\n    if 'file' not in request.files:\r\n        flash('No file part')\r\n        return redirect(request.url)\r\n\r\n    file = request.files['file']\r\n\r\n    # If user does not select file, browser also submits an empty part without filename\r\n    if file.filename == '':\r\n        flash('No selected file')\r\n        return redirect(request.url)\r\n\r\n    if file and allowed_file(file.filename):\r\n        filename = secure_filename(file.filename)\r\n        # Ensure the upload folder exists\r\n        upload_folder = current_app.config['UPLOAD_FOLDER']\r\n        if not os.path.exists(upload_folder):\r\n            os.makedirs(upload_folder)\r\n        filepath = os.path.join(upload_folder, filename)\r\n        file.save(filepath)\r\n\r\n        # Process the image and return results\r\n        return process_image(filepath)\r\n\r\n    flash('File type not allowed')\r\n    return redirect(url_for('index'))\r\n\r\n@app.route('/process', methods=['POST'])\r\ndef process_image_route():\r\n    \"\"\"Process an image with a provided path.\"\"\"\r\n    data = request.get_json()\r\n    image_path = data.get('image_path')\r\n\r\n    if not image_path or not os.path.exists(image_path):\r\n        return jsonify({'error': 'Invalid image path'}), 400\r\n\r\n    return process_image(image_path)\r\n\r\ndef process_image(image_path):\r\n    \"\"\"Process the image through the concrete damage detection pipeline.\"\"\"\r\n    try:\r\n        # Load the image\r\n        image_loader = ImageLoader()\r\n        image = image_loader.load_image(image_path)\r\n\r\n        # Process the image\r\n        processor = ImageProcessor()\r\n        processed_image = processor.preprocess(image)\r\n\r\n        # Perform segmentation\r\n        segmentation_result = perform_segmentation(processed_image)\r\n\r\n        # Calculate damage metrics\r\n        damage_metrics = calculate_damage(segmentation_result)\r\n\r\n        # Generate visualization for the results\r\n        # Ensure the results folder exists\r\n        results_folder = os.path.join(current_app.static_folder, 'results')\r\n        if not os.path.exists(results_folder):\r\n            os.makedirs(results_folder)\r\n        result_image_path = visualize_results(image, segmentation_result, results_folder)\r\n\r\n        # Create relative path for the result image to serve it\r\n        # The base for relative path should be the static folder\r\n        relative_result_path = os.path.relpath(result_image_path, current_app.static_folder)\r\n        # Ensure forward slashes for URL\r\n        relative_result_path = relative_result_path.replace('\\\\', '/')\r\n\r\n        return jsonify({\r\n            'status': 'success',\r\n            'damage_metrics': damage_metrics,\r\n            'result_image': url_for('static', filename=relative_result_path)\r\n        })\r\n\r\n    except Exception as e:\r\n        # Log the exception for debugging\r\n        current_app.logger.error(f\"Error processing image {image_path}: {e}\")\r\n        return jsonify({'error': 'An internal error occurred during image processing.'}), 500\r\n\r\n@app.route('/about')\r\ndef about():\r\n    \"\"\"Render the about page.\"\"\"\r\n    return render_template('about.html')\r\n\r\n@app.route('/api/health')\r\ndef health_check():\r\n    \"\"\"API endpoint for health checks.\"\"\"\r\n    return jsonify({'status': 'ok'})"
        }
    ]
}