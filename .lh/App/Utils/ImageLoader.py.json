{
    "sourceFile": "App/Utils/ImageLoader.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1745150109654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1745150109654,
            "name": "Commit-0",
            "content": "import os\r\nimport cv2\r\nimport logging\r\nimport numpy as np\r\n\r\nlogger = logging.getLogger(__name__)\r\n\r\nclass ImageLoader:\r\n    def __init__(self, image_dir):\r\n        if not os.path.isdir(image_dir):\r\n            logger.warning(f\"Provided image directory does not exist: {image_dir}\")\r\n            # Decide if this should be a fatal error or just a warning\r\n            # raise ValueError(f\"Image directory not found: {image_dir}\")\r\n        self.image_dir = image_dir\r\n        logger.info(f\"ImageLoader initialized with directory: {self.image_dir}\")\r\n        self.top_images = []\r\n        self.front_images = []\r\n        self.current_index = 0\r\n        self.load_images()\r\n\r\n    def load_images(self):\r\n        \"\"\"Load images from the image directory\"\"\"\r\n        logger.debug(f\"Loading images from: {self.image_dir}\")\r\n\r\n        if not os.path.exists(self.image_dir):\r\n            raise RuntimeError(f\"Image directory not found: {self.image_dir}\")\r\n\r\n        # Get all image files from the directory\r\n        try:\r\n            image_files = [f for f in os.listdir(self.image_dir) if self._is_image_file(f)]\r\n            image_files.sort()  # Sort files alphabetically\r\n\r\n            if not image_files:\r\n                raise RuntimeError(f\"No image files found in {self.image_dir}\")\r\n\r\n            logger.info(f\"Found {len(image_files)} images: {image_files}\")\r\n\r\n            # Process files in pairs\r\n            for i in range(0, len(image_files) - 1, 2):\r\n                # Load image pair\r\n                img1_path = os.path.join(self.image_dir, image_files[i])\r\n                img2_path = os.path.join(self.image_dir, image_files[i + 1])\r\n\r\n                img1 = self.load_image(img1_path)\r\n                img2 = self.load_image(img2_path)\r\n\r\n                if img1 is not None and img2 is not None:\r\n                    self.top_images.append(img1)\r\n                    self.front_images.append(img2)\r\n                    logger.info(f\"Loaded pair: {image_files[i]} and {image_files[i + 1]}\")\r\n                else:\r\n                    logger.warning(f\"Failed to load images: {image_files[i]} or {image_files[i + 1]}\")\r\n\r\n            if not self.top_images:\r\n                raise RuntimeError(\"No valid image pairs were loaded\")\r\n\r\n            logger.info(f\"Successfully loaded {len(self.top_images)} image pairs\")\r\n\r\n        except Exception as e:\r\n            logger.error(f\"Error loading images: {str(e)}\")\r\n            raise RuntimeError(f\"Failed to load images: {str(e)}\")\r\n\r\n    def load_image(self, image_filepath: str):\r\n        \"\"\"\r\n        Loads an image from the specified full filepath.\r\n\r\n        Args:\r\n            image_filepath: The absolute path to the image file.\r\n\r\n        Returns:\r\n            A NumPy array representing the loaded image (BGR format),\r\n            or None if loading fails.\r\n        \"\"\"\r\n        if not image_filepath:\r\n            logger.error(\"load_image received an empty filepath.\")\r\n            return None\r\n\r\n        if not os.path.exists(image_filepath):\r\n            logger.error(f\"Image file not found: {image_filepath}\")\r\n            return None\r\n        if not os.path.isfile(image_filepath):\r\n            logger.error(f\"Path exists but is not a file: {image_filepath}\")\r\n            return None\r\n\r\n        try:\r\n            image = cv2.imread(image_filepath)\r\n\r\n            if image is None:\r\n                logger.error(f\"Failed to load image (cv2.imread returned None): {image_filepath}\")\r\n                return None\r\n\r\n            logger.info(f\"Image loaded successfully: {image_filepath}, shape: {image.shape}\")\r\n            return image\r\n        except cv2.error as cv_err:\r\n            logger.error(f\"OpenCV error loading image {image_filepath}: {cv_err}\", exc_info=True)\r\n            return None\r\n        except Exception as e:\r\n            logger.error(f\"Unexpected error loading image {image_filepath}: {e}\", exc_info=True)\r\n            return None\r\n\r\n    def _is_image_file(self, filename):\r\n        valid_extensions = ['.jpg', '.jpeg', '.png', '.bmp']\r\n        return any(filename.lower().endswith(ext) for ext in valid_extensions)\r\n\r\n    def get_next_pair(self):\r\n        \"\"\"Get next pair of images, return None if no more images\"\"\"\r\n        if self.current_index >= len(self.top_images):\r\n            return None, None\r\n\r\n        top_img = self.top_images[self.current_index]\r\n        front_img = self.front_images[self.current_index]\r\n        self.current_index += 1\r\n\r\n        return top_img, front_img\r\n\r\n    def reset(self):\r\n        \"\"\"Reset to first image pair\"\"\"\r\n        self.current_index = 0\r\n"
        }
    ]
}